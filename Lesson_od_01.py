
#1. s.replace(" ", "") - Удаляются все пробелы из строки
#   .lower() - все символы переводятся в нижний регистр.
#   для того, чтобы проверка палиндрома была нечувствительна к пробелам и регистру символов.

#2. s == s[::-1]- Сравнивать[::-1]). Если строка равна своей обратной версии, значит, это палиндром.
#Пример использования показывает, что строка "А роза упала на лапу Азора" после
# удаления пробелов и приведения к нижнему регистру становится "арозаупаланалапуазора",
# которая равна своей обратной версии, следовательно, функция возвращает True.


def palindrome(line):
    # Удаление любых пробелов и преобразование строки в нижний регистр.
    l = line.replace(" ", "").lower()
    #Проверка, равна ли строка своей обратной
    return l == l[::-1]



import re

def is_palindrome(s):
    # Удаление пробелов, приведение строки к нижнему регистру и удаление знаков препинания
    s = re.sub(r'[^\w\s]', '', s.replace(" ", "").lower())
    # Проверка, является ли строка палиндромом
    return s == s[::-1]

# Пример использования:
test_string = "А роза, упала на лапу Азора!"
print(is_palindrome(test_string))  # Вывод: True

#re.sub(r'[^\w\s]', '', s) - удаляет все символы, кроме букв, цифр и пробелов из строки.
#s.replace(" ", "").lower() - удаляет пробелы и приводит строку к нижнему регистру.
#s == s[::-1]
#Пример использования показывает, что строка "А роза, упала на лапу Азора!" после удаления пробелов,
# знаков препинания и приведения к нижнему регистру становится "арозаупаланалапуазора",
# которая равна своей обратной версии, следовательно, функция возвращает True.